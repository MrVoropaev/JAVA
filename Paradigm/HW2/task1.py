# Условие
# На вход подается число n.
# Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n. 
# Обоснуйте выбор парадигм.
# Пример вывода:
# 1 * 1=1 1 * 2=2 1 * 3=3 1 * 4=4 1 * 5=5 1 * 6=6 ..
# 1 * 9=9

def print_multiplication_table(n):
    for i in range(1, n+1):
        for j in range(1, 10):
            print(f"{i} * {j} = {i*j}")

n = int(input("Введите число: "))
print_multiplication_table(n)


# # В данном примере выбрана процедурная парадигма, так как она является достаточно простой и понятной.
# Процедурное программирование позволяет разбить задачу на небольшие, логически связанные процедуры. 
# В данном случае, мы можем выделить отдельную процедуру для вывода таблицы умножения, что делает код более структурированным и понятным. 
# Процедурное программирование подходит для задач, где нет необходимости в сложной структуре данных или объектно-ориентированном подходе. 
# В данной задаче мы просто выводим таблицу умножения, поэтому нет необходимости в использовании сложных структур данных или объектов.


